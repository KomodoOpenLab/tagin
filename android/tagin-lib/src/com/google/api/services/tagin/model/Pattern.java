/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-06-26 16:27:34 UTC)
 * on 2013-06-30 at 15:17:19 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.tagin.model;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import android.net.wifi.ScanResult;

/**
 * Model definition for Pattern.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the . For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Pattern extends com.google.api.client.json.GenericJson {

	/**
	 * The value may be {@code null}.
	 */
	@com.google.api.client.util.Key
	private JsonMap beacons;

	/**
	 * The value may be {@code null}.
	 */
	@com.google.api.client.util.Key @com.google.api.client.json.JsonString
	private java.lang.Long id;

	/**
	 * The value may be {@code null}.
	 */
	@com.google.api.client.util.Key
	private Key key;

	/**
	 * The value may be {@code null}.
	 */
	@com.google.api.client.util.Key
	private java.lang.Double maxRssi;

	public Pattern() {
		this.id = null;
		this.beacons = new JsonMap();
		this.maxRssi = Beacon.NULL_RSSI;
	}
	/**
	 * @return value or {@code null} for none
	 */
	public JsonMap getBeacons() {
		return beacons;
	}

	/**
	 * @param beacons beacons or {@code null} for none
	 */
	public Pattern setBeacons(JsonMap beacons) {
		this.beacons = beacons;
		return this;
	}

	/**
	 * @return value or {@code null} for none
	 */
	public java.lang.Long getId() {
		return id;
	}

	/**
	 * @param id id or {@code null} for none
	 */
	public Pattern setId(java.lang.Long id) {
		this.id = id;
		return this;
	}

	/**
	 * @return value or {@code null} for none
	 */
	public Key getKey() {
		return key;
	}

	/**
	 * @param key key or {@code null} for none
	 */
	public Pattern setKey(Key key) {
		this.key = key;
		return this;
	}

	/**
	 * @return value or {@code null} for none
	 */
	public java.lang.Double getMaxRssi() {
		return maxRssi;
	}

	/**
	 * @param maxRssi maxRssi or {@code null} for none
	 */
	public Pattern setMaxRssi(java.lang.Double maxRssi) {
		this.maxRssi = maxRssi;
		return this;
	}

	public void put(String bssid, Integer frequency, Integer dbm) {
		Beacon b = new Beacon(bssid, frequency, dbm);
		beacons.put(b.getId(), b);
	}

	@SuppressWarnings("unchecked")
	public void updateRanks() {
		ArrayList<Beacon> values = new ArrayList<Beacon>((Collection<Beacon>)(Collection<?>)beacons.values());
		Collections.sort(values);
		maxRssi = values.get(0).getRssi();
		for (Object o : beacons.values()) {
			Beacon beacon = (Beacon) o;
			beacon.updateRank(maxRssi);
		}
	}

	public void addBeaconsFromScanResult(List<ScanResult> scanResults) {
		for (ScanResult scanResult: scanResults) {
			String id = scanResult.BSSID + ";" + scanResult.frequency;
			if (beacons.containsKey(id)) {
				Beacon b = (Beacon) beacons.get(id);
				b.setRssi((b.getRssi() + Util.dBm2Power(scanResult.level)) / 2);
			} else {
				put(scanResult.BSSID, scanResult.frequency, scanResult.level);
			}
		}
	}

	@Override
	public Pattern set(String fieldName, Object value) {
		return (Pattern) super.set(fieldName, value);
	}

	@Override
	public Pattern clone() {
		return (Pattern) super.clone();
	}

}
